#!/usr/bin/env bash
set -euf -o pipefail

source "$(dirname "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")/functions"

run_custom_script lint-package-json "$@"

owner="$(get repo-owner)"
name="$(get repo-name)"

run lint-json package.json

declare -i failures=0

assert() {
  if node <<EOF
    var pkg = require('./package.json');

    var isArray = Array.isArray;

    function isSortedObject(x) {
      return typeof x == 'object' && x != null &&
             (JSON.stringify(Object.keys(x)) ===
              JSON.stringify(Object.keys(x).sort()));
    }

    function matches(x, pattern) {
      return typeof x == 'string' && pattern.test(x);
    }

    process.exit(($1) === true ? 0 : 1);
EOF
  then
    pass "$1"
  else
    fail "$1"
    (( failures += 1 ))
  fi
}

assert "pkg.name === '$name' || pkg.name === '@$owner/$name'"

assert "matches(pkg.version, /./)"

assert "!('private' in pkg)"

assert "matches(pkg.description, /.{10}/)"

assert "(function() {
          var parse = require('spdx-expression-parse');
          try { parse(pkg.license); } catch (err) { return false; }
          return true;
        }())"

assert "isSortedObject(pkg.repository)
        && pkg.repository.type === 'git'
        && pkg.repository.url === 'git://github.com/$owner/$name.git'"

assert "isSortedObject(pkg.scripts)
        && pkg.scripts.doctest === 'sanctuary-doctest'
        && pkg.scripts.lint === 'sanctuary-lint'
        && pkg.scripts.release === 'sanctuary-release'
        && pkg.scripts.test === 'npm run lint && sanctuary-test && npm run doctest'"

assert "isSortedObject(pkg.dependencies)"

assert "isSortedObject(pkg.devDependencies)"

assert "isArray(pkg.files)"

if (( failures > 0 )) ; then exit 1 ; fi
